{
  "stats": {
    "suites": 4,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-02T10:38:19.820Z",
    "end": "2025-08-02T10:38:21.412Z",
    "duration": 1592,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c1d47dee-05d1-4869-a7ef-14d827fe22c3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "042c772b-5c90-4bd1-8c77-1d388a648e8c",
          "title": "User Management - Create New User",
          "fullFile": "E:\\Task Sesi 11 - API Automation\\tests\\createUser.js",
          "file": "\\tests\\createUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully create a user and return user data",
              "fullTitle": "User Management - Create New User should successfully create a user and return user data",
              "timedOut": false,
              "duration": 789,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Definisikan variable diawal test\n        const name = \"Aman swasono\";\n        const job = \"QA Automation\"\n        const response = await fetch('https://reqres.in/api/users', {\n            method: \"POST\",\n            headers: {\n                \"Content-type\": \"application/json\",\n                \"x-api-key\": \"reqres-free-v1\"\n            },\n            body: JSON.stringify({name, job}), // ambil variable \n        });\n        \n        const data = await response.json();\n        assert.strictEqual(response.status, 201, 'Expected status code 201 (Created)');\n        assert.strictEqual(data.name, name, 'Expected name to match');\n        assert.strictEqual(data.job, job, 'Expected job to match');\n        assert.ok(data.id, 'Expected respon to contain user id');\n        assert.ok(data.createdAt, 'Expected respon to contain creation timestamp');",
              "err": {},
              "uuid": "90acf4a8-e4b5-470d-bc85-f3f9ae7464cc",
              "parentUUID": "042c772b-5c90-4bd1-8c77-1d388a648e8c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90acf4a8-e4b5-470d-bc85-f3f9ae7464cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 789,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fc11ff98-2394-48d3-b878-976dbded631a",
          "title": "User Management - Delete User",
          "fullFile": "E:\\Task Sesi 11 - API Automation\\tests\\deleteUser.js",
          "file": "\\tests\\deleteUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully delete a user and return no content",
              "fullTitle": "User Management - Delete User should successfully delete a user and return no content",
              "timedOut": false,
              "duration": 276,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = 2; // ID user yang ingin dihapus\nconst response = await fetch(`https://reqres.in/api/users/${userId}`, {\n    method: \"DELETE\",\n    headers: {\n        \"x-api-key\": \"reqres-free-v1\"\n    },\n});\nassert.strictEqual(response.status, 204, 'Expected status code 204 (No Content)');",
              "err": {},
              "uuid": "15bc434a-934f-4ba5-b379-f847da9f57e2",
              "parentUUID": "fc11ff98-2394-48d3-b878-976dbded631a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "15bc434a-934f-4ba5-b379-f847da9f57e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 276,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cc26fa99-0c3e-49a8-8059-33fc99f95c99",
          "title": "User Management - Get list Of Users",
          "fullFile": "E:\\Task Sesi 11 - API Automation\\tests\\getUser.js",
          "file": "\\tests\\getUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a paginated list of users for page 2",
              "fullTitle": "User Management - Get list Of Users should return a paginated list of users for page 2",
              "timedOut": false,
              "duration": 39,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await fetch(`https://reqres.in/api/users?page=${page}`);\nconst data = await response.json();\n// Assertion \nassert.strictEqual(response.status, 200, 'Expected status code 200');\nassert.strictEqual(data.page, page, `Expected to be on page ${page}`);\nassert.ok(Array.isArray(data.data), 'Expected data to be an array');\nassert.ok(data.data.length > 0, 'Expected at least one user in the list');",
              "err": {},
              "uuid": "20daf4a7-91f9-4a24-8625-8d58cf84475d",
              "parentUUID": "cc26fa99-0c3e-49a8-8059-33fc99f95c99",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "20daf4a7-91f9-4a24-8625-8d58cf84475d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 39,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "06951efb-a5b8-4994-ba07-eabea90d5b0a",
          "title": "User Management - Update Existing User",
          "fullFile": "E:\\Task Sesi 11 - API Automation\\tests\\updateUser.js",
          "file": "\\tests\\updateUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully update a user and return updated data",
              "fullTitle": "User Management - Update Existing User should successfully update a user and return updated data",
              "timedOut": false,
              "duration": 466,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = 2; // ID user yang ingin diupdate\nconst updatedName = \"Aman Swasono Updated\";\nconst updatedJob = \"Senior QA Engineer\";\nconst response = await fetch(`https://reqres.in/api/users/${userId}`, {\n    method: \"PUT\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": \"reqres-free-v1\"\n    },\n    body: JSON.stringify({ name: updatedName, job: updatedJob }),\n});\nconst data = await response.json();\nassert.strictEqual(response.status, 200, 'Expected status code 200 (OK)');\nassert.strictEqual(data.name, updatedName, 'Expected updated name to match');\nassert.strictEqual(data.job, updatedJob, 'Expected updated job to match');\nassert.ok(data.updatedAt, 'Expected response to contain updated timestamp');",
              "err": {},
              "uuid": "d3320a2d-5061-402f-88d8-c8d6d5fe9faf",
              "parentUUID": "06951efb-a5b8-4994-ba07-eabea90d5b0a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3320a2d-5061-402f-88d8-c8d6d5fe9faf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 466,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}